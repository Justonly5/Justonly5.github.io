<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mr.Shaw&#39;s Blog</title>
  
  <subtitle>A Bornning Boy！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-12-14T01:35:32.100Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Mr.Shaw</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java代理模式</title>
    <link href="http://yoursite.com/2017/12/13/Java%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/12/13/Java代理模式/</id>
    <published>2017-12-13T06:53:34.000Z</published>
    <updated>2017-12-14T01:35:32.100Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-代理模式"><a href="#Java-代理模式" class="headerlink" title="Java 代理模式"></a>Java 代理模式</h1><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p>代理，或称 Proxy，一种设计模式，提供了目标对象的另外的访问方式：即通过代理对象访问目标对象。代理的基本原理是使用一个代理将目标对象包装起来，然后用该代理对象取代原始对象。任何对原始对象的调用都要通过代理，代理对象决定是否以及何时将方法调用转到原始对象上。这样做的好处是可以在目标对象的基础上增强额外的功能操作，即扩展目标对象的功能。</p><a id="more"></a><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><p>要求被代理类和代理类同时实现相应的一套接口，通过被代理类的对象调用重写接口的方法时，实际上执行的是被代理类的同样的重写的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Hello</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">say</span><span class="params">(String msg)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 目标对象(被代理对象)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloImpl</span> <span class="keyword">implements</span> <span class="title">Hello</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"The Target Subject say "</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对 HelloImpl 进行代理。扩展其功能。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloProxy</span> <span class="keyword">implements</span> <span class="title">Hello</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Hello hello;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloProxy</span><span class="params">(Hello hello)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hello = hello;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        before();</span><br><span class="line">        <span class="comment">// 调用被代理对象的方法</span></span><br><span class="line">        hello.say(msg);</span><br><span class="line">        after();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 目标方法扩展</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Before From Proxy."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"After From Proxy."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 目标对象</span></span><br><span class="line">    Hello hello = <span class="keyword">new</span> HelloImpl();</span><br><span class="line">    <span class="comment">// 代理对象:把目标对象传给代理对象,建立代理关系</span></span><br><span class="line">    Hello helloProxy = <span class="keyword">new</span> HelloProxy(hello);</span><br><span class="line">    <span class="comment">// 执行代理方法</span></span><br><span class="line">    helloProxy.say(<span class="string">"Test Proxy."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>静态代理总结:<br>    1、可以做到在不修改目标对象的功能前提下，对目标功能扩展。<br>    2、缺点：因为代理对象需要与目标对象实现一样的接口，所以会有很多代理类，类太多。同时，一旦接口增加方法，目标对象与代理对象都要维护。</p><p>PS：个人理解上其实静态代理代理对象与目标对象实现一样的接口这个不是必须的，目的在于保证代理对象和被代理对象有着相同的方法，给调用者一种错觉，调用的是目标对象的方法。</p><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>在程序运行时，根据被代理类及其实现的接口，动态的创建一个代理类。当调用代理类的实现的抽象方式时，就发起对被代理类通用的方法的调用。相比于静态代理，动态代理的优势在于可以很方便的对代理类的函数进行统一的处理，而不用修改每个代理类的函数。通过使用动态代理，我们可以做一个“统一指示”，对所有代理类的方法进行统一处理，而不用逐一修改每个方法。</p><p>涉及的技术点：<br>    1、实现了<code>InvocationHandler</code> 接口的实现类，并重写了<code>invoke()</code>方法<br>    2、<code>Proxy.newInstance(obj.getClass.getClassLoard(),obj.getClass.getInterfaces(),handler)</code></p><p>该方法是在<code>Proxy</code>类中是静态方法，且接收的三个参数依次为：</p><ul><li><code>ClassLoader loader</code>：指定当前目标对象使用类加载器，获取加载器的方法是固定的。</li><li><code>Class&lt;?&gt;[] interfaces</code>：目标对象实现的接口的类型，使用泛型方式确认类型。</li><li><code>InvocationHandler h</code>：事件处理，执行目标对象的方法时，会触发事件处理器的方法，会把当前执行目标对象的方法作为参数传入。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">action</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 被代理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RealSubject</span> <span class="keyword">implements</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是被代理类，记得要执行我哦！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 事件处理</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    Object obj;<span class="comment">// 实现了接口的被代理类的对象的声明</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 给被代理的对象实例化 返回一个代理类的对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">blind</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.obj = obj;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(obj.getClass().getClassLoader(),</span><br><span class="line">                obj.getClass().getInterfaces(), <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当通过代理类的对象发起对被重写的方法的调用时，都会转换为对如下的invoke的方法的调用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">// 前置扩展</span></span><br><span class="line">        before();</span><br><span class="line">        <span class="comment">// method方法的返回值为returnValue(调用被代理的方法)</span></span><br><span class="line">        Object returnValue = method.invoke(<span class="keyword">this</span>.obj, args);</span><br><span class="line">        <span class="comment">// 后置扩展</span></span><br><span class="line">        after();</span><br><span class="line">        <span class="keyword">return</span> returnValue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 目标方法扩展</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Before From Proxy."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"After From Proxy."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestProxy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1.被代理类的对象</span></span><br><span class="line">        RealSubject realSubject = <span class="keyword">new</span> RealSubject();</span><br><span class="line">        <span class="comment">// 2.创建一个实现了InvocationHandler接口的类的对象</span></span><br><span class="line">        MyInvocationHandler handler = <span class="keyword">new</span> MyInvocationHandler();</span><br><span class="line">        <span class="comment">// 3.调用blind()方法，动态的返回一个同样实现了realSubject所在类实现的接口Subject的代理类的对象。</span></span><br><span class="line">        Object obj = handler.blind(realSubject);</span><br><span class="line">        Subject sub = (Subject) obj;<span class="comment">// 此时sub就是代理类的对象</span></span><br><span class="line">        sub.action();<span class="comment">// 转到对InvacationHandler接口的实现类的invoke()方法的调用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不管是静态代理还是动态代理，都要求目标对象(被代理对象)是实现了某个接口的对象，如果目标对象没有实现接口，就无法使用动态代理了，并且如果目标对象中新增了接口中没有方法也无法被代理。</p><h2 id="Cglib"><a href="#Cglib" class="headerlink" title="Cglib"></a>Cglib</h2><p>cglib是针对类来实现代理的，原理是对指定的业务类生成一个子类，并覆盖其中业务方法实现代理。因为采用的是继承，所以不能对<code>final</code>修饰的类进行代理，也无法代理<code>final</code> 修饰的方法。</p><ol><li>定义目标对象(被代理对象)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TargetObj</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"The Action From Target Object."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>实现 <code>MethodInterceptor</code>接口方法<code>intercept</code>，创建代理类</li></ol><p>首先导入 cglib 依赖包:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- CGLib --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CgProxyFactory</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 目标对象</span></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化目标对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CgProxyFactory</span><span class="params">(Object target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxyInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 创建增强器,用来创建动态代理对象</span></span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        <span class="comment">// 2. 为增强器指定要代理的业务类(即为下面生成的代理类的父类)</span></span><br><span class="line">        enhancer.setSuperclass(<span class="keyword">this</span>.target.getClass());</span><br><span class="line">        <span class="comment">// 3. 设置回调：对于代理类上所有方法的调用，都会调用CallBack，而Callback则需要实现intercept()方法进行拦截</span></span><br><span class="line">        enhancer.setCallback(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">// 4. 创建动态代理类对象并返回</span></span><br><span class="line">        <span class="keyword">return</span> enhancer.create();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object obj, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Object result = method.invoke(obj, args);</span></span><br><span class="line">       <span class="comment">// Object result = methodProxy.invoke(obj,args);</span></span><br><span class="line">        System.out.println(<span class="string">"Do Before Target Action...."</span>);</span><br><span class="line">        Object result = methodProxy.invokeSuper(obj, args);</span><br><span class="line">        System.out.println(<span class="string">"Do After Target Action...."</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>测试</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCgProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">    TargetObj targetObj = <span class="keyword">new</span> TargetObj();</span><br><span class="line">    CgProxyFactory proxyFactory = <span class="keyword">new</span> CgProxyFactory(targetObj);</span><br><span class="line">    TargetObj proxy = (TargetObj)proxyFactory.getProxyInstance();</span><br><span class="line">    proxy.action();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另一种写法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CgProxyFactory</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CgProxyFactory instance = <span class="keyword">new</span> CgProxyFactory();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">CgProxyFactory</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CgProxyFactory <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getProxy</span><span class="params">(Class&lt;T&gt; cls)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (T)Enhancer.create(cls,<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object obj, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Do Before Target Action...."</span>);</span><br><span class="line">        Object result = methodProxy.invokeSuper(obj, args);</span><br><span class="line">        System.out.println(<span class="string">"Do After Target Action...."</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        TargetObj proxy = CgProxyFactory.getInstance().getProxy(TargetObj.class);</span><br><span class="line">        proxy.action();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TargetObj</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"The Action From Target Object."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Java-代理模式&quot;&gt;&lt;a href=&quot;#Java-代理模式&quot; class=&quot;headerlink&quot; title=&quot;Java 代理模式&quot;&gt;&lt;/a&gt;Java 代理模式&lt;/h1&gt;&lt;h2 id=&quot;代理模式&quot;&gt;&lt;a href=&quot;#代理模式&quot; class=&quot;headerlink&quot; title=&quot;代理模式&quot;&gt;&lt;/a&gt;代理模式&lt;/h2&gt;&lt;p&gt;代理，或称 Proxy，一种设计模式，提供了目标对象的另外的访问方式：即通过代理对象访问目标对象。代理的基本原理是使用一个代理将目标对象包装起来，然后用该代理对象取代原始对象。任何对原始对象的调用都要通过代理，代理对象决定是否以及何时将方法调用转到原始对象上。这样做的好处是可以在目标对象的基础上增强额外的功能操作，即扩展目标对象的功能。&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java 8 学习笔记</title>
    <link href="http://yoursite.com/2017/12/04/Java-8-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/12/04/Java-8-学习笔记/</id>
    <published>2017-12-04T08:55:32.000Z</published>
    <updated>2017-12-04T08:57:06.182Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>NoSql 选型</title>
    <link href="http://yoursite.com/2017/12/04/NoSql-%E9%80%89%E5%9E%8B/"/>
    <id>http://yoursite.com/2017/12/04/NoSql-选型/</id>
    <published>2017-12-04T01:21:45.000Z</published>
    <updated>2017-12-04T03:47:38.698Z</updated>
    
    <content type="html"><![CDATA[<p>不同的 Nosql，其实应用的场景各有不同，所以我们应该先了解不同 Nosql之间的差别，然后分析什么才是最适合我使用的 Nosql。</p> <a id="more"></a><h1 id="一、Nosql-介绍"><a href="#一、Nosql-介绍" class="headerlink" title="一、Nosql 介绍"></a>一、Nosql 介绍</h1><p>Nosql 的全称是 Not Only Sql，这个概念早起就有人提出，在09年的时候比较火。Nosql 指的是非关系型数据库，而我们常用的都是关系型数据库。就像我们常用的 mysql，sqlserver一样，这些数据库一般用来存储重要信息，应对普通的业务是没有问题的。但是，随着互联网的高速发展，传统的关系型数据库在应付超大规模，超大流量以及高并发的时候力不从心。而就在这个时候，Nosql 得到的高速的发展。</p><h1 id="二、Nosql-和关系型数据库的区别"><a href="#二、Nosql-和关系型数据库的区别" class="headerlink" title="二、Nosql 和关系型数据库的区别"></a>二、Nosql 和关系型数据库的区别</h1><ul><li><p>存储方式</p><p>  关系型数据库是表格式的，因此存储在表的行和列中。他们之间很容易关联协作存储，提取数据很方便。而 Nosql数据库则与其相反，他是大块的组合在一起。通常存储在数据集中，就像文档、键值对或者图结构。</p></li><li><p>存储结构</p><p>  关系型数据库对应的是结构化数据，数据表都预先定义了结构（列的定义），结构描述了数据的形式和内容。这一点对数据建模至关重要，虽然预定义结构带来了可靠性和稳定性，但是修改这些数据比较困难。而Nosql数据库基于动态结构，使用与非结构化数据。因为Nosql数据库是动态结构，可以很容易适应数据类型和结构的变化。</p></li><li><p>存储规范</p><p>  关系型数据库的数据存储为了更高的规范性，把数据分割为最小的关系表以避免重复，获得精简的空间利用。虽然管理起来很清晰，但是单个操作设计到多张表的时候，数据管理就显得有点麻烦。而Nosql数据存储在平面数据集中，数据经常可能会重复。单个数据库很少被分隔开，而是存储成了一个整体，这样整块数据更加便于读写</p></li><li><p>存储扩展</p><p>  这可能是两者之间最大的区别，关系型数据库是纵向扩展，也就是说想要提高处理能力，要使用速度更快的计算机。因为数据存储在关系表中，操作的性能瓶颈可能涉及到多个表，需要通过提升计算机性能来克服。虽然有很大的扩展空间，但是最终会达到纵向扩展的上限。而Nosql数据库是横向扩展的，它的存储天然就是分布式的，可以通过给资源池添加更多的普通数据库服务器来分担负载。</p></li><li><p>查询方式</p><p>  关系型数据库通过结构化查询语言来操作数据库（就是我们通常说的SQL）。SQL支持数据库CURD操作的功能非常强大，是业界的标准用法。而 Nosql 查询以块为单元操作数据，使用的是非结构化查询语言（UnQl），它是没有标准的。关系型数据库表中主键的概念对应 Nosql 中存储文档的ID。关系型数据库使用预定义优化方式（比如索引）来加快查询操作，而Nosql更简单更精确的数据访问模式。</p></li><li><p>事务</p><p>  关系型数据库遵循ACID规则（原子性(Atomicity)、一致性(Consistency)、隔离性(Isolation)、持久性(Durability)），而Nosql数据库遵循BASE原则（基本可用（Basically Availble）、软/柔性事务（Soft-state ）、最终一致性（Eventual Consistency））。由于关系型数据库的数据强一致性，所以对事务的支持很好。关系型数据库支持对事务原子性细粒度控制，并且易于回滚事务。而 Nosql 数据库是在CAP（一致性、可用性、分区容忍度）中任选两项，因为基于节点的分布式系统中，很难全部满足，所以对事务的支持不是很好，虽然也可以使用事务，但是并不是 Nosq 的闪光点。</p></li><li><p>性能</p><p>  关系型数据库为了维护数据的一致性付出了巨大的代价，读写性能比较差。在面对高并发读写性能非常差，面对海量数据的时候效率非常低。而 Nosql 存储的格式都是 key-value 类型的，并且存储在内存中，非常容易存储，而且对于数据的 一致性是 弱要求。Nosql 无需 sql 的解析，提高了读写性能。</p></li><li><p>授权方式</p><p>  关系型数据库通常有 SQL Server，Mysql，Oracle。主流的 Nosql 数据库有 redis，memcache，MongoDb。大多数的关系型数据库都是付费的并且价格昂贵，成本较大，而 Nosql 数据库通常都是开源的。</p></li></ul><h1 id="三、Redis、Memcache-和-MongoDb的优缺点"><a href="#三、Redis、Memcache-和-MongoDb的优缺点" class="headerlink" title="三、Redis、Memcache 和 MongoDb的优缺点"></a>三、Redis、Memcache 和 MongoDb的优缺点</h1><h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h2><ul><li><p>优点</p><p>  1.支持多种数据结构，如 string（字符串）、 list(双向链表)、dict(hash表)、set(集合）、zset(排序set)、hyperloglog（基数估算）</p><p>  2.支持持久化操作，可以进行aof及rdb数据持久化到磁盘，从而进行数据备份或数据恢复等操作，较好的防止数据丢失　　的手段。</p><p>  3.支持通过 Replication 进行数据复制，通过 master-slave 机制，可以实时进行数据的同步复制，支持多级复制和增量复制，master-slave机制是 Redis 进行 HA 的重要手段。</p><p>  4.单线程请求，所有命令串行执行，并发情况下不需要考虑数据一致性问题。</p><p>  5.支持pub/sub消息订阅机制，可以用来进行消息订阅与通知。</p><p>  6.支持简单的事务需求，但业界使用场景很少，并不成熟。</p></li><li><p>缺点</p><p>  1.Redis只能使用单线程，性能受限于CPU性能，故单实例CPU最高才可能达到5-6wQPS每秒（取决于数据结构，数据大小以及服务器硬件性能，日常环境中QPS高峰大约在1-2w左右）。</p><p>  2.支持简单的事务需求，但业界使用场景很少，并不成熟，既是优点也是缺点。</p><p>  3.Redis在string类型上会消耗较多内存，可以使用dict（hash表）压缩存储以降低内存耗用。</p></li></ul><h2 id="Memcache"><a href="#Memcache" class="headerlink" title="Memcache"></a>Memcache</h2><ul><li><p>优点</p><p>  1.Memcached可以利用多核优势，单实例吞吐量极高，可以达到几十万QPS（取决于key、value的字节大小以及服务器硬件性能，日常环境中QPS高峰大约在4-6w左右）。适用于最大程度扛量。</p><p>  2.支持直接配置为session handle。</p></li><li><p>缺点</p><p>  1.只支持简单的key/value数据结构，不像Redis可以支持丰富的数据类型。</p><p>  2.无法进行持久化，数据不能备份，只能用于缓存使用，且重启后数据全部丢失。</p><p>  3.无法进行数据同步，不能将MC中的数据迁移到其他MC实例中。</p><p>  4.Memcached内存分配采用Slab Allocation机制管理内存，value大小分布差异较大时会造成内存利用率降低，并引发低利用率时依然出现踢出等问题。需要用户注重value设计。</p></li></ul><h2 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h2><ul><li><p>优点</p><p>  1.更高的写负载，MongoDB拥有更高的插入速度。</p><p>  2.处理很大的规模的单表，当数据表太大的时候可以很容易的分割表。</p><p>  3.高可用性，设置M-S不仅方便而且很快，MongoDB还可以快速、安全及自动化的实现节点（数据中心）故障转移。</p><p>  4.快速的查询，MongoDB支持二维空间索引，比如管道，因此可以快速及精确的从指定位置获取数据。MongoDB在启动后会将数据库中的数据以文件映射的方式加载到内存中。如果内存资源相当丰富的话，这将极大地提高数据库的查询速度。</p><p>  5.非结构化数据的爆发增长，增加列在有些情况下可能锁定整个数据库，或者增加负载从而导致性能下降，由于MongoDB的弱数据结构模式，添加1个新字段不会对旧表格有任何影响，整个过程会非常快速。</p></li><li><p>缺点</p><p>  1.不支持事务。</p><p>  2.MongoDB占用空间过大 。</p><p>  3.MongoDB没有成熟的维护工具。</p></li></ul><h1 id="四、Redis、Memcache和MongoDB的区别"><a href="#四、Redis、Memcache和MongoDB的区别" class="headerlink" title="四、Redis、Memcache和MongoDB的区别"></a>四、Redis、Memcache和MongoDB的区别</h1><ul><li><p>性能</p><p>  三者的性能都比较高，总的来讲：Memcache和Redis差不多，要高于MongoDB。</p></li><li><p>便利性</p><p>  memcache数据结构单一。</p><p>  redis丰富一些，数据操作方面，redis更好一些，较少的网络IO次数。</p><p>  mongodb支持丰富的数据表达，索引，最类似关系型数据库，支持的查询语言非常丰富。</p></li><li><p>存储空间</p><p>  redis在2.0版本后增加了自己的VM特性，突破物理内存的限制；可以对key value设置过期时间（类似memcache）。</p><p>  memcache可以修改最大可用内存,采用LRU算法。</p><p>  mongoDB适合大数据量的存储，依赖操作系统VM做内存管理，吃内存也比较厉害，服务不要和别的服务在一起。</p></li><li><p>可用性</p><p>  redis，依赖客户端来实现分布式读写；主从复制时，每次从节点重新连接主节点都要依赖整个快照,无增量复制，因性能和效率问题，所以单点问题比较复杂；不支持自动sharding,需要依赖程序设定一致hash 机制。一种替代方案是，不用redis本身的复制机制，采用自己做主动复制（多份存储），或者改成增量复制的方式（需要自己实现），一致性问题和性能的权衡。</p><p>  Memcache本身没有数据冗余机制，也没必要；对于故障预防，采用依赖成熟的hash或者环状的算法，解决单点故障引起的抖动问题。</p><p>  mongoDB支持master-slave,replicaset（内部采用paxos选举算法，自动故障恢复）,auto sharding机制，对客户端屏蔽了故障转移和切分机制。</p></li><li><p>可靠性</p><p>  redis支持（快照、AOF）：依赖快照进行持久化，aof增强了可靠性的同时，对性能有所影响。</p><p>  memcache不支持，通常用在做缓存,提升性能。</p><p>  MongoDB从1.8版本开始采用binlog方式支持持久化的可靠性。</p></li><li><p>一致性</p><p>  Memcache 在并发场景下，用cas保证一致性。</p><p>  redis事务支持比较弱，只能保证事务中的每个操作连续执行。</p><p>  mongoDB不支持事务。</p></li><li><p>数据分析</p><p>  mongoDB内置了数据分析的功能(mapreduce),其他两者不支持。</p></li><li><p>应用场景</p><p>  redis：数据量较小的更性能操作和运算上。</p><p>  memcache：用于在动态系统中减少数据库负载，提升性能;做缓存，提高性能（适合读多写少，对于数据量比较大，可以采用sharding）。</p><p>  MongoDB:主要解决海量数据的访问效率问题。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不同的 Nosql，其实应用的场景各有不同，所以我们应该先了解不同 Nosql之间的差别，然后分析什么才是最适合我使用的 Nosql。&lt;/p&gt;
    
    </summary>
    
      <category term="转载" scheme="http://yoursite.com/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="NoSql" scheme="http://yoursite.com/tags/NoSql/"/>
    
  </entry>
  
  <entry>
    <title>Solr</title>
    <link href="http://yoursite.com/2017/11/30/Solr/"/>
    <id>http://yoursite.com/2017/11/30/Solr/</id>
    <published>2017-11-30T08:13:00.000Z</published>
    <updated>2017-12-14T01:44:23.139Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Solr"><a href="#Solr" class="headerlink" title="Solr"></a>Solr</h1><h2 id="一、Solr-是什么"><a href="#一、Solr-是什么" class="headerlink" title="一、Solr 是什么"></a>一、Solr 是什么</h2><pre><code>Solr 是 Apache下的一个顶级开源项目，采用 Java 开发，它是基于 Lucene 的全文搜索服务器。Solr 提供了比 Lucene 更为丰富的查询语言，同时实现了可配置、可扩展，并对索引、搜索性能进行了优化。Solr 是一个全文检索服务器，只需要进行配置就可以实现全文检索服务。</code></pre><h2 id="二、Solr-搜索引擎基础"><a href="#二、Solr-搜索引擎基础" class="headerlink" title="二、Solr 搜索引擎基础"></a>二、Solr 搜索引擎基础</h2><ul><li><p>搜索引擎</p><p>搜索引擎是指一个庞大的互联网资源数据库，如网页，新闻组，程序，图像等。它有助于在万维网上定位信息。</p><p>用户可以通过以关键字或短语的形式将查询传递到搜索引擎中来搜索信息。 搜索引擎然后搜索其数据库并向用户返回相关链接。</p></li><li><p>搜索引擎组件</p><p>一般来说，搜素引擎有三个基本组件，如下所列：</p><ul><li><p>Web 爬虫：Web 爬虫也称为蜘蛛或机器人。它是一个收集网络信息的软件组件。</p></li><li><p>数据库：Web 上的所有信息都存储在数据库中。它们包含大量的 Web 资源。</p></li><li><p>搜索接口：此组件是用户和数据库之间的接口。它帮助用户搜索数据库。</p></li></ul></li><li><p>搜索引擎是如何工作的？</p><p>  | 步骤    | 标题或名称    |  描述  |<br>  | ——  | —–:   | :—-: |<br>  |   1     | 获取原始内容   | 任何搜索应用程序的第一步是收集要进行搜索的目标内容。   |<br>  |  2      | 构建文档      |   从原始内容构建文档，让搜索应用程序可以很容易地理解和解释。   |<br>  |  3      | 分析文档      |   在索引开始之前，将对文档进行分析。   |<br>  |  4      | 索引文档    |   当文档被构建和分析后，下一步是对它们建立索引，以便可以基于特定键而不是文档的全部内容来检索该文档。索引类似于在书开始页或末尾处的目录索引，其中常见单词以其页码显示，使得这些单词可以快速跟踪，而不是搜索整本书。   |<br>  |  5      | 用于搜索的用户接口      |   当索引数据库就绪，应用程序可以执行搜索操作。 为了帮助用户进行搜索，应用必须提供用户接口，用户可以在其中输入文本并启动搜索过程。   |<br>  |6     |构建查询  |当用户做出搜索文本的请求，应用程序应该使用该文本来准备查询对象，然后可以使用该查询对象来查询索引数据库以获得相关的细节。|<br>  |7     |搜索查询|使用查询对象，检查索引数据库以获取相关详细信息和内容文档。|<br>  |8     |渲染结果|当收到所需的结果，应用程序应决定如何使用其用户界面向用户显示结果。|</p></li></ul><h2 id="三、Solr-的安装及配置"><a href="#三、Solr-的安装及配置" class="headerlink" title="三、Solr 的安装及配置"></a>三、Solr 的安装及配置</h2><ul><li><p>Linux 环境安装</p><ol><li><p>安装 Tomcat、JDK</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mkdir /usr/local/solr</span></span><br><span class="line"></span><br><span class="line">[root@localhost ~]<span class="comment"># cp apache-tomcat-7.0.47 /usr/local/solr/tomcat -r</span></span><br></pre></td></tr></table></figure></li><li><p>将 solr 传到 Linux，并解压</p></li><li><p>把 solr 文件夹下的 /dist/solr-4.10.3.war包部署到tomcat下。并改名为solr.war</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost dist]<span class="comment"># cp solr-4.10.3.war /usr/local/solr/tomcat/webapps/solr.war</span></span><br></pre></td></tr></table></figure></li><li><p>解压war包。启动tomcat自动解压。关闭tomcat。删除solr.war。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost dist]<span class="comment"># cd /usr/local/tomcat/bin</span></span><br><span class="line">[root@localhost bin]<span class="comment"># ./startup.sh</span></span><br><span class="line">[root@localhost bin]<span class="comment"># ./shutdown.sh</span></span><br></pre></td></tr></table></figure></li><li><p>把/root/solr-4.10.3/example/lib/ext 目录下所有的jar包复制到solr工程中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ext]<span class="comment"># cp * /usr/local/solr/tomcat/webapps/solr/WEB-INF/lib/</span></span><br></pre></td></tr></table></figure></li><li><p>创建solrhome。Solrhome是存放solr服务器所有配置文件的目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost example]<span class="comment"># mkdir /usr/local/solr/solrhome</span></span><br><span class="line">[root@localhost example]<span class="comment"># pwd</span></span><br><span class="line">/root/solr-4.10.3/example</span><br><span class="line"></span><br><span class="line">[root@localhost example]<span class="comment"># cp -r solr /usr/local/solr/solrhome</span></span><br><span class="line">[root@localhost example]<span class="comment">#</span></span><br></pre></td></tr></table></figure></li><li><p>告诉solr服务器solrhome的位置。需要修改solr工程的web.xml文件。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">env-entry</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">env-entry-name</span>&gt;</span>solr/home<span class="tag">&lt;/<span class="name">env-entry-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">env-entry-value</span>&gt;</span>/usr/local/solr/solrhome<span class="tag">&lt;/<span class="name">env-entry-value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">env-entry-type</span>&gt;</span>java.lang.String<span class="tag">&lt;/<span class="name">env-entry-type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">env-entry</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>启动 Tomcat，浏览器访问localhost:8080/solr</p></li></ol></li></ul><h2 id="四、"><a href="#四、" class="headerlink" title="四、"></a>四、</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Solr&quot;&gt;&lt;a href=&quot;#Solr&quot; class=&quot;headerlink&quot; title=&quot;Solr&quot;&gt;&lt;/a&gt;Solr&lt;/h1&gt;&lt;h2 id=&quot;一、Solr-是什么&quot;&gt;&lt;a href=&quot;#一、Solr-是什么&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Nginx</title>
    <link href="http://yoursite.com/2017/11/30/Nginx/"/>
    <id>http://yoursite.com/2017/11/30/Nginx/</id>
    <published>2017-11-30T07:57:31.000Z</published>
    <updated>2017-11-30T07:57:31.472Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/11/30/hello-world/"/>
    <id>http://yoursite.com/2017/11/30/hello-world/</id>
    <published>2017-11-30T06:42:37.293Z</published>
    <updated>2017-11-30T06:42:37.294Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
